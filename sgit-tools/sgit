#!/bin/bash

# Super Git (sgit) - Run git commands on all repositories in the current directory
# Author: Nick B
# Date: May 17, 2025
# Version: 2.0

# Set text colors
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Print banner
print_banner() {
  echo -e "${BLUE}${BOLD}"
  echo "  _____                           _____  _  _   "
  echo " / ____|                         / ____|(_)| |  "
  echo "| (___   _   _  _ __    ___  _ _| |  __  _ | |_ "
  echo " \___ \ | | | || '_ \  / _ \| '__| | |_ || || __|"
  echo " ____) || |_| || |_) ||  __/| |  | |__| || || |_ "
  echo "|_____/  \__,_|| .__/  \___||_|   \_____||_| \__|"
  echo "               | |                               "
  echo "               |_|                               "
  echo -e "${NC}"
}

# Display usage information
usage() {
  print_banner
  echo -e "${CYAN}${BOLD}Super Git (sgit) - Run git commands on multiple repositories at once${NC}"
  echo ""
  echo -e "${YELLOW}Usage:${NC}"
  echo "  sgit [options] <git-command> [git-command-args]"
  echo ""
  echo -e "${YELLOW}Options:${NC}"
  echo "  -h, --help           Show this help message"
  echo "  -d, --depth <num>    Maximum directory depth to search (default: 1)"
  echo "  -p, --parallel       Run commands in parallel (faster but mixed output)"
  echo "  -q, --quiet          Show only essential output"
  echo "  -r, --recursive      Search for git repositories recursively"
  echo "  -s, --select         Interactive mode to select which repositories to run on"
  echo ""
  echo -e "${YELLOW}Examples:${NC}"
  echo "  sgit status                      # Show status of all repositories"
  echo "  sgit pull                        # Pull updates for all repositories"
  echo "  sgit -r status                   # Show status of all repositories recursively"
  echo "  sgit -p pull                     # Pull all repositories in parallel"
  echo "  sgit -s checkout -b new-branch   # Select repositories to create new branch in"
  echo "  sgit add . && sgit commit -m \"Update all repositories\"   # Chain commands"
  echo ""
  echo -e "${YELLOW}Available shortcut commands:${NC}"
  echo "  sgit-status   # Equivalent to 'sgit status'"
  echo "  sgit-pull     # Equivalent to 'sgit pull'"
  exit 0
}

# Get command line arguments
parse_args() {
  DEPTH=1
  PARALLEL=false
  QUIET=false
  RECURSIVE=false
  INTERACTIVE=false

  while [[ $# -gt 0 ]]; do
    case $1 in
      -h|--help)
        usage
        ;;
      -d|--depth)
        DEPTH="$2"
        shift 2
        ;;
      -p|--parallel)
        PARALLEL=true
        shift
        ;;
      -q|--quiet)
        QUIET=true
        shift
        ;;
      -r|--recursive)
        RECURSIVE=true
        shift
        ;;
      -s|--select)
        INTERACTIVE=true
        shift
        ;;
      *)
        break
        ;;
    esac
  done

  # Get the git command
  if [[ $# -eq 0 ]]; then
    usage
  fi

  GIT_COMMAND="$@"
}

# Find all git repositories in the given directory
find_repos() {
  local search_path="${1:-.}"
  local depth_arg=""
  
  if [[ "$RECURSIVE" == "false" ]]; then
    depth_arg="-maxdepth $DEPTH"
  fi
  
  # Use eval to properly handle the conditional depth argument
  eval find "$search_path" $depth_arg -type d -name ".git" 2>/dev/null | sed 's/\/.git$//'
}

# Interactive repository selection
select_repos() {
  local all_repos=("$@")
  local selected_repos=()
  
  echo -e "${BLUE}${BOLD}Available repositories:${NC}"
  echo ""
  
  for i in "${!all_repos[@]}"; do
    echo -e "  ${YELLOW}[$i]${NC} ${all_repos[$i]}"
  done
  
  echo ""
  echo -e "${BLUE}Enter the numbers of repositories to include (space-separated), or 'all' for all:${NC}"
  read -r selection
  
  if [[ "$selection" == "all" ]]; then
    selected_repos=("${all_repos[@]}")
  else
    for num in $selection; do
      if [[ "$num" =~ ^[0-9]+$ ]] && [ "$num" -ge 0 ] && [ "$num" -lt "${#all_repos[@]}" ]; then
        selected_repos+=("${all_repos[$num]}")
      fi
    done
  fi
  
  echo -e "${BLUE}Selected ${#selected_repos[@]} repositories${NC}"
  echo ""
  
  echo "${selected_repos[@]}"
}

# Execute git command in repository
execute_command() {
  local repo="$1"
  local count="$2"
  local total="$3"
  
  if [[ "$QUIET" == "true" ]]; then
    echo -e "${YELLOW}[$count/$total] ${BLUE}$repo${NC}"
  else
    echo -e "${YELLOW}[$count/$total] Processing: ${BLUE}$repo${NC}"
  fi
  
  (
    cd "$repo" || { echo -e "${RED}Failed to enter directory: $repo${NC}"; return 1; }
    
    if [[ "$QUIET" == "false" ]]; then
      echo -e "${CYAN}Executing: git $GIT_COMMAND${NC}"
    fi
    
    if git $GIT_COMMAND; then
      echo -e "${GREEN}Success: $repo${NC}"
      return 0
    else
      echo -e "${RED}Failed: $repo${NC}"
      return 1
    fi
  )
  
  # Add a separator between repositories for readability
  if [[ "$QUIET" == "false" ]]; then
    echo -e "${YELLOW}----------------------------------------${NC}"
  fi
}

# Main function
main() {
  # Parse command line arguments
  parse_args "$@"
  
  if [[ "$QUIET" == "false" ]]; then
    print_banner
    echo -e "${BLUE}===== Running 'git $GIT_COMMAND' on repositories =====${NC}\n"
  fi
  
  # Find all git repositories
  mapfile -t repos < <(find_repos ".")
  
  # Exit if no repositories found
  if [ ${#repos[@]} -eq 0 ]; then
    echo -e "${RED}No git repositories found!${NC}"
    exit 1
  fi
  
  # Interactive mode to select repositories
  if [[ "$INTERACTIVE" == "true" ]]; then
    mapfile -t repos < <(select_repos "${repos[@]}")
    
    # Exit if no repositories selected
    if [ ${#repos[@]} -eq 0 ]; then
      echo -e "${RED}No repositories selected!${NC}"
      exit 1
    fi
  fi
  
  # Count directories
  total=${#repos[@]}
  count=0
  success_count=0
  failure_count=0
  
  # Execute the command in each repository
  if [[ "$PARALLEL" == "true" ]]; then
    # Parallel execution
    for repo in "${repos[@]}"; do
      ((count++))
      execute_command "$repo" "$count" "$total" &
    done
    wait
  else
    # Sequential execution
    for repo in "${repos[@]}"; do
      ((count++))
      if execute_command "$repo" "$count" "$total"; then
        ((success_count++))
      else
        ((failure_count++))
      fi
    done
  fi
  
  # Calculate the success/failure counts for parallel execution
  if [[ "$PARALLEL" == "true" ]]; then
    success_count=$(find_repos "." | xargs -I{} bash -c "cd {} && git $GIT_COMMAND &>/dev/null && echo 1 || echo 0" | grep -c "1")
    failure_count=$((total - success_count))
  fi
  
  # Print summary
  echo -e "${BLUE}Summary:${NC}"
  echo -e "${GREEN}Successful: $success_count${NC}"
  echo -e "${RED}Failed: $failure_count${NC}"
  echo -e "${YELLOW}Total repositories: $total${NC}"
  
  # Return success if all operations succeeded
  if [ "$failure_count" -eq 0 ]; then
    exit 0
  else
    exit 1
  fi
}

# Run the main function with all arguments
main "$@"
